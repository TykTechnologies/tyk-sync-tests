name: Tyk Sync dump Command with --apis and --oas-apis flags
description: This test suite checks if dump command and its flags (--apis and --oas-apis) work with Tyk Dashboard
testcases:
  - name: Prepare testing environment
    steps:
      - info: "clean up resources on Tyk and clean the content of test/ directory"
        script: |
          TYK_AUTH='{{.TYK_AUTH}}' TYK_URL='{{ .TYK_URL }}' ../clean-apis.sh
          ./helper-clean-dump-output.sh
          sleep 2;
        assertions:
          - result.code MustEqual 0
      - info: "create 3 classic and OAS API Definitions, and 3 Policies"
        script: |
          set -e
          MAX=3 TYK_AUTH=$TYK_AUTH TYK_URL=$TYK_URL ../create-apis.sh
          sleep 2;
        assertions:
          - result.code MustEqual 0
  - name: Run tyk-sync dump command for 1 OAS API Definitions
    steps:
      - info: "run tyk-sync dump command to export 1 OAS API"
        script: |
          tyk-sync dump -d "{{ .TYK_URL }}" -s="{{ .TYK_AUTH }}" -t ../test --oas-apis="test-api-2"
          sleep 1;
        assertions:
          - result.code MustEqual 0
      - info: "verify that output directory exists"
        script: |
          test -d ../test
        assertions:
          - result.code MustEqual 0
      - info: "verify that .tyk.json file exists in the output directory"
        script: |
          test -s ../test/.tyk.json
        assertions:
          - result.code MustEqual 0
      - info: "verify that the directory only contains .json files and .gitkeep file"
        script: |
          if find ../test -type f | grep -qvE '\.json$' | grep -qv '.gitkeep'; then
              echo "The ../test directory contains files other than .json."
              exit 1
          fi
        assertions:
          - result.code MustEqual 0
      - info: "verify that there are no classic API Definitions are dumped"
        script: |
          count=$(find "../test" -type f -name "api-*\.json" | wc -l)
          
          if [ $count -ne 0 ]; then
            exit 1
          fi
        assertions:
          - result.code MustEqual 0
      - info: "verify that 1 OAS API Definitions are dumped"
        script: |
          count=$(find "../test" -type f -name "oas-*\.json" | wc -l)
          
          if [ $count -ne 1 ]; then
            exit 1
          fi
        assertions:
          - result.code MustEqual 0
      - info: "verify that no policies are dumped"
        script: |
          count=$(find "../test" -type f -name "policy-*\.json" | wc -l)
          
          if [ $count -ne 0 ]; then
            echo "Dump command should not export policies if we only want to export --oas-apis"
            exit 1
          fi
        assertions:
          - result.code MustEqual 0
      - info: "type field must be apidef in .tyk.json"
        script: |
          jq '.type == "apidef"' ../test/.tyk.json
        assertions:
          - result.code MustEqual 0
      - info: ".files field in .tyk.json must contain 1 elements"
        script: |
          jq '.files | length == 2' ../test/.tyk.json
        assertions:
          - result.code MustEqual 0
      - info: ".tyk.json must contain 1 oas and 0 classic api information"
        script: |
          count_api=0
          count_oas=0
          
          while IFS= read -r line; do
            file_name=$line
          
            if [[ $file_name =~ ^\"api-.* ]]; then
              ((count_api++))
            fi
            if [[ $file_name =~ "oas-test-api-2.json" ]]; then
              ((count_oas++))
            fi
          done <<< "$(jq '.files[] |.file' ../test/.tyk.json)"
          
          echo "classic $count_api and oas $count_oas"
          if [[ $count_api -eq 0 ]] && [[ $count_oas -eq 1 ]]; then
            exit 0
          fi
        assertions:
          - result.systemout ShouldEqual classic 0 and oas 1
          - result.code MustEqual 0
  - name: Publish exported OAS API Definition with tyk-sync update
    steps:
      - info: "remove OAS API Definition with ID test-api-2 (which was exported in previous step) from Tyk"
        type: http
        url: '{{ .TYK_URL }}/api/apis/oas/test-api-2'
        method: DELETE
        headers:
          Content-Type: application/json
          Authorization: '{{ .TYK_AUTH }}'
        assertions:
          - result.bodyjson ShouldNotBeEmpty
          - result.bodyjson ShouldContainKey Message
          - result.bodyjson ShouldContainKey Status
          - result.bodyjson.Status ShouldEqual "OK"
      - info: "ensure that OAS API Definition with ID test-api-2 is deleted from Tyk"
        type: http
        url: '{{ .TYK_URL }}/api/apis/oas/test-api-2'
        method: GET
        headers:
          Content-Type: application/json
          Authorization: '{{ .TYK_AUTH }}'
        assertions:
          - result.statuscode ShouldEqual 400
          - result.bodyjson ShouldNotBeEmpty
          - result.bodyjson ShouldContainKey Message
          - result.bodyjson ShouldContainKey Status
          - result.bodyjson.Status ShouldEqual "Error"
          - result.bodyjson.Message ShouldEqual "Could not retrieve Api detail"
      - info: "tyk-sync publish command should recreate the deleted OAS API Definition"
        script: |
          tyk-sync publish -d "{{ .TYK_URL }}" -s="{{ .TYK_AUTH }}" -p ../test --oas-apis="test-api-2"
          sleep 1;
        assertions:
          - result.code MustEqual 0
      - info: "ensure that OAS API Definition with ID test-api-2 is recreated on Tyk"
        type: http
        url: '{{ .TYK_URL }}/api/apis/oas/test-api-2'
        method: GET
        headers:
          Content-Type: application/json
          Authorization: '{{ .TYK_AUTH }}'
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldNotBeEmpty
          - result.bodyjson ShouldContainKey "x-tyk-api-gateway"
          - result.bodyjson ShouldContainKey "openapi"
          - result.bodyjson ShouldContainKey "info"
      - info: "ensure that category of the OAS API Definition with ID test-api-2 is recreated on Tyk"
        type: http
        url: '{{ .TYK_URL }}/api/apis/oas/test-api-2/categories'
        method: GET
        headers:
          Content-Type: application/json
          Authorization: '{{ .TYK_AUTH }}'
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldNotBeEmpty
          - result.bodyjson ShouldContainKey "categories"
          - result.bodyjson.categories ShouldHaveLength 1
  - name: Publish all APIs and Policies
    steps:
      - info: "Dump all resources before cleaning Tyk"
        script: |
          tyk-sync dump -d "{{ .TYK_URL }}" -s="{{ .TYK_AUTH }}" -t ../test
          sleep 1;
      - info: "run clean-apis.sh to clean up resources on Tyk"
        script: |
          TYK_AUTH='{{.TYK_AUTH}}' TYK_URL='{{ .TYK_URL }}' ../clean-apis.sh
        assertions:
          - result.code MustEqual 0
      - info: "verify that no APIs left"
        type: http
        url: '{{ .TYK_URL }}/api/apis'
        headers:
          Content-Type: application/json
          Authorization: '{{ .TYK_AUTH }}'
        assertions:
          - result.bodyjson ShouldNotBeEmpty
          - result.bodyjson ShouldHaveLength 2
          - result.bodyjson ShouldContainKey apis
          - result.bodyjson ShouldContainKey pages
          - result.bodyjson.apis ShouldHaveLength 0
          - result.bodyjson.pages ShouldEqual 1
      - info: "verify that no Policy left"
        type: http
        url: '{{ .TYK_URL }}/api/portal/policies'
        headers:
          Content-Type: application/json
          Authorization: '{{ .TYK_AUTH }}'
        assertions:
          - result.bodyjson ShouldNotBeEmpty
          - result.bodyjson ShouldHaveLength 2
          - result.bodyjson ShouldContainKey Data
          - result.bodyjson ShouldContainKey Pages
          - result.bodyjson.Data ShouldHaveLength 0
          - result.bodyjson.Pages ShouldEqual 1
      - info: "ensure that publish command is going to publish all resources to Tyk"
        script: |
          tyk-sync publish -d "{{ .TYK_URL }}" -s="{{ .TYK_AUTH }}" -p ../test
          sleep 1;
        assertions:
          - result.code MustEqual 0
      - info: "ensure that API Definitions are created"
        type: http
        url: '{{ .TYK_URL }}/api/apis/'
        method: GET
        headers:
          Content-Type: application/json
          Authorization: '{{ .TYK_AUTH }}'
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldNotBeEmpty
          - result.bodyjson ShouldContainKey "apis"
          - result.bodyjson ShouldContainKey "pages"
          - result.bodyjson.apis ShouldHaveLength 6
          - result.bodyjson.pages ShouldEqual 1
      - info: "ensure that all Policies are published"
        type: http
        url: '{{ .TYK_URL }}/api/portal/policies'
        headers:
          Content-Type: application/json
          Authorization: '{{ .TYK_AUTH }}'
        assertions:
          - result.bodyjson ShouldNotBeEmpty
          - result.bodyjson ShouldHaveLength 2
          - result.bodyjson ShouldContainKey Data
          - result.bodyjson ShouldContainKey Pages
          - result.bodyjson.Data ShouldHaveLength 3
          - result.bodyjson.Pages ShouldEqual 1
      - info: "ensure that category of the OAS API Definition with ID test-api-1 is recreated on Tyk"
        type: http
        url: '{{ .TYK_URL }}/api/apis/oas/test-api-1/categories'
        method: GET
        headers:
          Content-Type: application/json
          Authorization: '{{ .TYK_AUTH }}'
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldNotBeEmpty
          - result.bodyjson ShouldContainKey "categories"
          - result.bodyjson.categories ShouldHaveLength 1
      - info: "ensure that category of the OAS API Definition with ID test-api-2 is recreated on Tyk"
        type: http
        url: '{{ .TYK_URL }}/api/apis/oas/test-api-2/categories'
        method: GET
        headers:
          Content-Type: application/json
          Authorization: '{{ .TYK_AUTH }}'
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldNotBeEmpty
          - result.bodyjson ShouldContainKey "categories"
          - result.bodyjson.categories ShouldHaveLength 1
      - info: "ensure that category of the OAS API Definition with ID test-api-3 is recreated on Tyk"
        type: http
        url: '{{ .TYK_URL }}/api/apis/oas/test-api-3/categories'
        method: GET
        headers:
          Content-Type: application/json
          Authorization: '{{ .TYK_AUTH }}'
        assertions:
          - result.statuscode ShouldEqual 200
          - result.bodyjson ShouldNotBeEmpty
          - result.bodyjson ShouldContainKey "categories"
          - result.bodyjson.categories ShouldHaveLength 1

